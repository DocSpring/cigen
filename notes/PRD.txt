# cigen – Product Requirements Document (PRD)

## Vision

Create **cigen**, a blazing‑fast Rust CLI that compiles concise, template‑based definitions into complete CI pipelines. It supports multi‑architecture builds, hash‑driven caching, dependency‑aware workflows, and a plugin system—initially targeting CircleCI, with an extensible architecture for additional providers such as GitHub Actions.

---

## Target Users

* **Engineering teams** working in monorepos with complex CI requirements.
* Developers who need **multi‑arch** (amd64/arm64) Docker builds and **self‑hosted runners**.
* Teams looking for stronger type safety, faster builds, and reduced YAML maintenance.

---

## Problems

1. **YAML‑driven CI** becomes difficult to scale—logic duplication and limited reuse.
2. **Inefficient caching** leads to unnecessary job runs and longer feedback cycles.
3. Multi‑arch builds, local runners, and complex dependency graphs demand heavy manual maintenance.

---

## Goals & Success Criteria

| # | Goal                                              | Success Metric                                              |
| - | ------------------------------------------------- | ----------------------------------------------------------- |
| 1 | Emit valid CircleCI 2.1 YAML                      | All generated configs pass `circleci config validate`.      |
| 2 | Generate job variants for amd64 and arm64         | Architecture‑specific jobs run successfully in CI.          |
| 3 | Skip unchanged jobs via SHA‑256 file‑hash keys    | ≥ 90 % reduction in redundant job runs on typical PRs.      |
| 4 | Support at least three cache backends via plugins | CircleCI native, Redis, S3 integrations working end‑to‑end. |
| 5 | Provide an extensible emitter framework           | GitHub Actions output works with parity to CircleCI.        |

---

## Core Features

### File‑Hash Caching

* Define **file groups** per job; compute SHA‑256 across contents.
* Hash incorporated in cache keys and job‑skip conditions.

### Project Graph

* Parse Turborepo workspace metadata (`turbo.json`, package.json scripts, dependency graph) so that `cigen` understands project relationships and can compute affected tasks.
* **No source code** from the workspace is embedded; compatibility is achieved solely by using published Turborepo conventions.
* Build a DAG to determine affected jobs and optimise CI workflows.
* **Additional templates & settings** live in a dedicated **`.cigen/`**\*\* directory\*\* within the repo, keeping `cigen`‑specific configuration separate from standard workspace files.

### Multi‑Architecture

* Duplicate jobs for each target architecture (e.g. `amd64`, `arm64`).
* **Resource Class Strategy**

  * CircleCI requires each job to declare a single `resource_class` (e.g. `arm.medium`, `xlarge`, or `my-namespace/my-runner`).
  * `cigen` lets you declare an architecture matrix once (**`arch: [amd64, arm64]`**) and **automatically generates** variants per arch **and** per runner pool.
  * **Dynamic Runner Selection:**

    * **Self‑hosted Preferred:** If a self‑hosted runner for the requested architecture exists, `cigen` assigns that resource class.
    * **Remote Preferred (override):** Users can mark specific jobs (e.g. production build & deploy) with `runner_preference: remote`, instructing `cigen` to choose a remote CircleCI runner—even when a self‑hosted alternative exists—to take advantage of lower network latency to AWS or other data centres.
  * Example YAML fragments generated by `cigen`:

    ```yaml
    jobs:
      rspec_amd64:
        docker:
          - image: myapp:latest-amd64
        resource_class: my-namespace/amd64-runner  # self‑hosted preferred

      deploy_production_amd64:
        docker:
          - image: myapp:deploy-amd64
        resource_class: xlarge  # remote managed runner (override)
    ```
* **Per‑runner cache backends** continue to work across these variants (e.g., MinIO for self‑hosted, CircleCI native for managed) and will be automatically selected—associate a backend with a given resource class and it will be used.

### Plugin System

`cigen` distinguishes **two independent caching layers**—each backed by its own pluggable interface:

1. **Job‑Status Cache (Skip Cache)**

   * Purpose: Track *successful completion* of a job for a specific SHA‑256 file‑hash key.
   * Behavior: If the key exists and the job finished successfully, the job is **skipped**.
   * Backends: Redis, S3, DynamoDB, file‑based store, etc.

2. **Artifact / Package Cache (File Cache)**

   * Purpose: Store heavy build outputs (e.g. `vendor/bundle`, `node_modules`, compiled assets).
   * Behavior: Restore on job start, save on success.
   * Backends: CircleCI native cache, S3, MinIO, local disk, etc.
   * **Per‑runner configuration:** For example, CircleCI runners can use native cache while self‑hosted runners point to a MinIO bucket via an env var.

#### Plugin Traits

* `JobStatusCachePlugin` – defines `check(key)` and `record_success(key)`.
* `FileCachePlugin` – defines `restore(paths, key)` and `save(paths, key)`.
* Plugins are selected via the config file and can vary per runner environment.

#### Vendor‑Agnostic Config Snippet

```yaml
caches:
  bundles:
    paths: ["vendor/bundle"]
    backend: circleci-native  # alternative: s3, minio, redis
  test_status:
    type: job-status  # designates the skip cache layer
    backend: redis
    env_key: CI_CACHE_REDIS_URL
```

With this separation, teams declare *what* to cache (e.g., `vendor/bundle`) and *where* to store it independently of the CI provider.

> **Defaults & Overrides**
> • `cigen` ships with sensible defaults—e.g., CircleCI native cache for cloud runners
> • Every setting is override‑able per cache **and** per runner via the config file or environment variables, supporting any mix of local vs remote runners and amd64 vs arm64 executors.

### CLI Commands

* `cigen plan` – preview graph, hashes, skipped jobs.
* `cigen build` – generate provider YAML.
* `cigen test` – validate templates & config schema.

### Templating Engine Requirements

* **Engine Choice:** Utilize a Jinja‑style Rust engine (e.g., **MiniJinja**) that supports variables, includes, filters, and **rich runtime errors**.
* **Diagnostics:** All template errors must return line & column information and integrate with **miette** for colourful CLI diagnostics.
* **Extensibility:** Users can register custom filters/functions; filters may execute shell commands or other logic as needed.
* **Include & Filters Example:**

  ```jinja
  echo "{{ read('etc-hosts-dev.txt') | strip }}" >> /etc/hosts
  ```

  where `read` is a builtin function and `strip` is a filter.

### Core Template Library

* **Purpose:** Provide reusable, first‑class snippets for common tasks to keep templates concise.
* **Ruby Gems Install (********`install_gems`****\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*)**

  * Restores a cache for `vendor/bundle` using the active **CachePlugin**.
  * Runs `bundle install --deployment --jobs 4` (configurable).
  * Saves the cache with the SHA‑256 key derived from Gemfile and Gemfile.lock contents.
  * Works transparently across amd64 and arm64 job variants.
* **Planned Templates:** Node (Yarn/NPM) dependency install, Go module cache, Docker layer caching, etc.
* **Benefit:** Teams reference `install_gems` in the template spec; `cigen` injects all steps (restore‑cache, install, save‑cache) automatically—eliminating boilerplate YAML.

### Dynamic Pipeline Generation

* **Setup Workflow Support:** `cigen` can emit an initial *setup* workflow (CircleCI *setup workflows*) that computes parameters or environment context, then **dynamically generates and triggers a follow‑up config**.

  * All logic and templates remain user‑defined; `cigen` supplies helper utilities and core library functions.
  * Example: `cigen build setup` → builds `.cigen/workflows/setup.yml` and emits the runtime config specified by `.cigen/config.yml` (by default to `.circleci/config.yml`).
* **Multiple Root Templates:** CLI accepts multiple root templates (e.g., `build.yml`, `deploy.yml`) and produces separate CI configs in one invocation.

  * Example: `cigen build` (or `cigen build default`) → builds `.cigen/workflows/default.yml`.
* **Use Cases:** Platform‑specific deploy pipelines, staged promotions, nightly vs PR builds.
* **Outcome:** Smaller, focused pipeline files, faster validation, and easier conditional logic.

---

## Architecture Overview

```
                +----------------+
                |   User Spec    |
                |  (template)    |
                +--------+-------+
                         |
                         v
+------------------- Core Engine --------------------+
|  Job & Workflow Models  |  File‑Hash Hasher        |
|  Project Graph Builder  |  Plugin Registry         |
+-----------+-------------+-------------+-----------+
            |                           |
  +---------v--------+        +---------v--------+
  |   CircleCI       |        |  GitHub Actions  |
  |    Emitter       |        |     Emitter      |
  +------------------+        +------------------+
            |                           |
   circleci/config.yml      .github/workflows/ci.yml
```

---

## Out of Scope (Will **Never** Be Added)

* Web UI / visualizer – `cigen` will rely on existing Turborepo graph tooling (or other workspace visualizers) instead of building a bespoke UI.
* Real‑time CI dashboard – users should rely on their CI provider’s native dashboards.
* Automatic migration from existing YAML – teams are expected to adopt `cigen` templates directly and use workspace config files (`turbo.json`, package manifests)

---

## Constraints & Assumptions

* Rust 1.75 + toolchain.
* Output YAML must validate per provider schema.
* Plugins compiled as Rust crates loaded at runtime or link‑time.
* Minimal external dependencies for easy static binaries.

---

## Risks & Mitigations

| Risk                             | Mitigation                                              |
| -------------------------------- | ------------------------------------------------------- |
| Plugin API instability           | Provide versioned trait interfaces & integration tests. |
| YAML divergence across providers | Maintain dedicated emitter test suites.                 |
| Hash calculation overhead        | Use parallel hashing and incremental calculations.      |

---

## Documentation

* **Docs Folder:** All documentation lives under a version‑controlled `./docs` directory using **Docusaurus**.
* **Static Generation:** A dedicated workflow (generated by `cigen` or kept as a template) builds the static site.
* **Deployment:** Output is deployed to **GitHub Pages** (via `gh-pages` branch or GitHub Actions) on every merge to `main`.
* **Versioning:** Docusaurus versioning can be enabled to match tool releases.

## Template Format & Validation

* **Format:** YAML or JSON.
* **Schema:** A versioned JSON Schema published on GitHub / GitHub Pages.
* **Validation:** Editors like VS Code automatically validate `cigen` config via `$schema` reference.

## Open Questions

1. Distribution channels (Homebrew, Scoop, `cargo install`)?
